{"ast":null,"code":"import { toast } from 'react-toastify';\nimport userService from '../services/user.service';\nimport userConstants from '../constants/user.constants';\ntoast.configure();\n\nfunction login(params) {\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n\n  return dispatch => {\n    dispatch(request({\n      pseudo: params.pseudo\n    }));\n    userService.login(params.pseudo, params.password).then(user => {\n      dispatch(success(user));\n      localStorage.setItem('idUser', user.id);\n      localStorage.setItem('pseudo', user.pseudo);\n      toast.info('Connexion réussie');\n    }, error => {\n      dispatch(failure(error.toString()));\n      toast.error(error.toString());\n    });\n  };\n}\n\nfunction register(params) {\n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n\n  return dispatch => {\n    dispatch(request({\n      pseudo: params.pseudo\n    }));\n    userService.register(params.pseudo, params.password).then(user => {\n      dispatch(success(user));\n      toast.info('Inscription réussie');\n    }, error => {\n      dispatch(failure(error.toString()));\n      toast.error(error.toString());\n    });\n  };\n}\n\nexport default {\n  login,\n  register\n};","map":{"version":3,"sources":["/Users/ilan/Dev/GitHub/Reactionary_Front/reactionary_front/src/actions/user.action.js"],"names":["toast","userService","userConstants","configure","login","params","request","user","type","LOGIN_REQUEST","success","LOGIN_SUCCESS","failure","error","LOGIN_FAILURE","dispatch","pseudo","password","then","localStorage","setItem","id","info","toString","register","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\n\nimport userService from '../services/user.service';\nimport userConstants from '../constants/user.constants';\n\ntoast.configure();\n\nfunction login(params) {\n  function request(user) {\n    return { type: userConstants.LOGIN_REQUEST, user };\n  }\n  function success(user) {\n    return { type: userConstants.LOGIN_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: userConstants.LOGIN_FAILURE, error };\n  }\n\n  return (dispatch) => {\n    dispatch(request({ pseudo: params.pseudo }));\n    userService.login(params.pseudo, params.password).then(\n      (user) => {\n        dispatch(success(user));\n        localStorage.setItem('idUser', user.id);\n        localStorage.setItem('pseudo', user.pseudo);\n        toast.info('Connexion réussie');\n      },\n      (error) => {\n        dispatch(failure(error.toString()));\n        toast.error(error.toString());\n      },\n    );\n  };\n}\n\nfunction register(params) {\n  function request(user) {\n    return { type: userConstants.REGISTER_REQUEST, user };\n  }\n  function success(user) {\n    return { type: userConstants.REGISTER_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: userConstants.REGISTER_FAILURE, error };\n  }\n\n  return (dispatch) => {\n    dispatch(request({ pseudo: params.pseudo }));\n    userService.register(params.pseudo, params.password).then(\n      (user) => {\n        dispatch(success(user));\n        toast.info('Inscription réussie');\n      },\n      (error) => {\n        dispatch(failure(error.toString()));\n        toast.error(error.toString());\n      },\n    );\n  };\n}\n\nexport default {\n  login,\n  register,\n};\n"]},"metadata":{},"sourceType":"module"}