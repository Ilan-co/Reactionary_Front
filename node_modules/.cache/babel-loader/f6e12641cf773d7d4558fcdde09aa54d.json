{"ast":null,"code":"import { io } from 'socket.io-client';\nimport socketConstants from '../constants/socket.constants';\nconst pseudo = localStorage.getItem('pseudo');\nconst idUser = localStorage.getItem('idUser');\nconst socket = io('ws://localhost:3000');\n\nfunction getRooms() {\n  function success(data) {\n    return {\n      type: socketConstants.GET_ALL_ROOM_SUCCESS,\n      data\n    };\n  }\n\n  return dispatch => {\n    socket.emit('getRooms', '');\n    socket.on('rooms', data => {\n      dispatch(success(data));\n    });\n  };\n}\n\nfunction connectToRoom(idRoom) {\n  function request(id) {\n    return {\n      type: socketConstants.CONNECT_TO_ROOM_REQUEST,\n      id\n    };\n  }\n\n  function success(id) {\n    return {\n      type: socketConstants.CONNECT_TO_ROOM_SUCCESS,\n      id\n    };\n  }\n\n  return dispatch => {\n    dispatch(request({\n      idRoom\n    }));\n    socket.emit('join', {\n      room: idRoom,\n      pseudo,\n      idUser,\n      date: new Date().toISOString()\n    });\n    socket.on('joined', () => {\n      dispatch(success(idRoom));\n    });\n  };\n}\n\nfunction getMessage() {\n  function success(data) {\n    return {\n      type: socketConstants.GET_ALL_MESSAGE_SUCCESS,\n      data\n    };\n  }\n\n  return dispatch => {\n    socket.once('message', data => {\n      dispatch(success(data));\n    });\n  };\n}\n\nfunction getUsersInRoom() {\n  function success(data) {\n    return {\n      type: socketConstants.GET_USERS_IN_ROOM_SUCCESS,\n      data\n    };\n  }\n\n  return dispatch => {\n    socket.on('users', data => {\n      dispatch(success(data));\n    });\n  };\n}\n\nfunction sendMessage(values) {\n  function success() {\n    return {\n      type: socketConstants.SEND_MESSAGE_SUCCESS\n    };\n  }\n\n  return dispatch => {\n    socket.emit('message', {\n      room: values.id,\n      pseudo,\n      message: values.message,\n      date: values.date\n    });\n    dispatch(success());\n  };\n}\n\nfunction leaveLobby(room) {\n  function success() {\n    return {\n      type: socketConstants.LEAVE_LOBBY_SUCCESS\n    };\n  }\n\n  return dispatch => {\n    socket.emit('leave', {\n      idUser,\n      room,\n      pseudo\n    });\n    dispatch(success());\n  };\n}\n\nfunction sendDraw(data) {\n  function success() {\n    return {\n      type: socketConstants.SEND_DRAW_SUCCESS\n    };\n  }\n\n  return dispatch => {\n    socket.emit('drawing', data);\n    dispatch(success());\n  };\n}\n\nfunction getDraw() {\n  function success(data) {\n    return {\n      type: socketConstants.GET_DRAW_SUCCESS,\n      data\n    };\n  }\n\n  return dispatch => {\n    socket.on('drawing', data => {\n      dispatch(success(data));\n    });\n  };\n}\n\nexport default {\n  getRooms,\n  connectToRoom,\n  getMessage,\n  getUsersInRoom,\n  sendMessage,\n  leaveLobby,\n  sendDraw,\n  getDraw\n};","map":{"version":3,"sources":["/Users/ilan/Dev/GitHub/Reactionary_Front/reactionary_front/src/actions/socket.action.js"],"names":["io","socketConstants","pseudo","localStorage","getItem","idUser","socket","getRooms","success","data","type","GET_ALL_ROOM_SUCCESS","dispatch","emit","on","connectToRoom","idRoom","request","id","CONNECT_TO_ROOM_REQUEST","CONNECT_TO_ROOM_SUCCESS","room","date","Date","toISOString","getMessage","GET_ALL_MESSAGE_SUCCESS","once","getUsersInRoom","GET_USERS_IN_ROOM_SUCCESS","sendMessage","values","SEND_MESSAGE_SUCCESS","message","leaveLobby","LEAVE_LOBBY_SUCCESS","sendDraw","SEND_DRAW_SUCCESS","getDraw","GET_DRAW_SUCCESS"],"mappings":"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","sourcesContent":["import { io } from 'socket.io-client';\n\nimport socketConstants from '../constants/socket.constants';\n\nconst pseudo = localStorage.getItem('pseudo');\nconst idUser = localStorage.getItem('idUser');\nconst socket = io('ws://localhost:3000');\n\nfunction getRooms() {\n  function success(data) {\n    return { type: socketConstants.GET_ALL_ROOM_SUCCESS, data };\n  }\n\n  return (dispatch) => {\n    socket.emit('getRooms', '');\n    socket.on('rooms', (data) => {\n      dispatch(success(data));\n    });\n  };\n}\n\nfunction connectToRoom(idRoom) {\n  function request(id) {\n    return { type: socketConstants.CONNECT_TO_ROOM_REQUEST, id };\n  }\n  function success(id) {\n    return { type: socketConstants.CONNECT_TO_ROOM_SUCCESS, id };\n  }\n\n  return (dispatch) => {\n    dispatch(request({ idRoom }));\n    socket.emit('join', {\n      room: idRoom, pseudo, idUser, date: new Date().toISOString(),\n    });\n    socket.on('joined', () => {\n      dispatch(success(idRoom));\n    });\n  };\n}\n\nfunction getMessage() {\n  function success(data) {\n    return { type: socketConstants.GET_ALL_MESSAGE_SUCCESS, data };\n  }\n  return (dispatch) => {\n    socket.once('message', (data) => {\n      dispatch(success(data));\n    });\n  };\n}\n\nfunction getUsersInRoom() {\n  function success(data) {\n    return { type: socketConstants.GET_USERS_IN_ROOM_SUCCESS, data };\n  }\n\n  return (dispatch) => {\n    socket.on('users', (data) => {\n      dispatch(success(data));\n    });\n  };\n}\n\nfunction sendMessage(values) {\n  function success() {\n    return { type: socketConstants.SEND_MESSAGE_SUCCESS };\n  }\n  return (dispatch) => {\n    socket.emit('message', {\n      room: values.id, pseudo, message: values.message, date: values.date,\n    });\n    dispatch(success());\n  };\n}\n\nfunction leaveLobby(room) {\n  function success() {\n    return { type: socketConstants.LEAVE_LOBBY_SUCCESS };\n  }\n\n  return (dispatch) => {\n    socket.emit('leave', {\n      idUser, room, pseudo,\n    });\n    dispatch(success());\n  };\n}\n\nfunction sendDraw(data) {\n  function success() {\n    return { type: socketConstants.SEND_DRAW_SUCCESS };\n  }\n\n  return (dispatch) => {\n    socket.emit('drawing', data);\n    dispatch(success());\n  };\n}\n\nfunction getDraw() {\n  function success(data) {\n    return { type: socketConstants.GET_DRAW_SUCCESS, data };\n  }\n\n  return (dispatch) => {\n    socket.on('drawing', (data) => {\n      dispatch(success(data));\n    });\n  };\n}\n\nexport default {\n  getRooms,\n  connectToRoom,\n  getMessage,\n  getUsersInRoom,\n  sendMessage,\n  leaveLobby,\n  sendDraw,\n  getDraw,\n};\n"]},"metadata":{},"sourceType":"module"}