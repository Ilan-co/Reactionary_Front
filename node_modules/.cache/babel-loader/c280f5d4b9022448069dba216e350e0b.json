{"ast":null,"code":"const URL = 'http://localhost:3000/users/';\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      return Promise.reject(data);\n    }\n\n    return data;\n  });\n}\n\nasync function login(pseudo, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      pseudo,\n      password\n    })\n  };\n  const response = await fetch(`${URL}login`, requestOptions);\n  return handleResponse(response);\n}\n\nasync function register(pseudo, password) {\n  const user = {\n    pseudo,\n    password\n  };\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  const response = await fetch(`${URL}register`, requestOptions);\n  return handleResponse(response);\n}\n\nconst userService = {\n  login,\n  register\n};\nexport default userService;","map":{"version":3,"sources":["/Users/ilan/Dev/GitHub/Reactionary_Front/reactionary_front/src/services/user.service.js"],"names":["URL","handleResponse","response","text","then","data","JSON","parse","ok","Promise","reject","login","pseudo","password","requestOptions","method","headers","body","stringify","fetch","register","user","userService"],"mappings":"AAAA,MAAMA,GAAG,GAAG,8BAAZ;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;AAChC,SAAOA,QAAQ,CAACC,IAAT,GAAgBC,IAAhB,CAAsBD,IAAD,IAAU;AACpC,UAAME,IAAI,GAAGF,IAAI,IAAIG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACM,EAAd,EAAkB;AAChB,aAAOC,OAAO,CAACC,MAAR,CAAeL,IAAf,CAAP;AACD;;AACD,WAAOA,IAAP;AACD,GANM,CAAP;AAOD;;AAED,eAAeM,KAAf,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;AACrC,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEX,IAAI,CAACY,SAAL,CAAe;AAAEN,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAf;AAHe,GAAvB;AAMA,QAAMX,QAAQ,GAAG,MAAMiB,KAAK,CAAE,GAAEnB,GAAI,OAAR,EAAgBc,cAAhB,CAA5B;AACA,SAAOb,cAAc,CAACC,QAAD,CAArB;AACD;;AAED,eAAekB,QAAf,CAAwBR,MAAxB,EAAgCC,QAAhC,EAA0C;AACxC,QAAMQ,IAAI,GAAG;AACXT,IAAAA,MADW;AAEXC,IAAAA;AAFW,GAAb;AAIA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEX,IAAI,CAACY,SAAL,CAAeG,IAAf;AAHe,GAAvB;AAMA,QAAMnB,QAAQ,GAAG,MAAMiB,KAAK,CAAE,GAAEnB,GAAI,UAAR,EAAmBc,cAAnB,CAA5B;AACA,SAAOb,cAAc,CAACC,QAAD,CAArB;AACD;;AAED,MAAMoB,WAAW,GAAG;AAClBX,EAAAA,KADkB;AAElBS,EAAAA;AAFkB,CAApB;AAKA,eAAeE,WAAf","sourcesContent":["const URL = 'http://localhost:3000/users/';\n\nfunction handleResponse(response) {\n  return response.text().then((text) => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      return Promise.reject(data);\n    }\n    return data;\n  });\n}\n\nasync function login(pseudo, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ pseudo, password }),\n  };\n\n  const response = await fetch(`${URL}login`, requestOptions);\n  return handleResponse(response);\n}\n\nasync function register(pseudo, password) {\n  const user = {\n    pseudo,\n    password,\n  };\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(user),\n  };\n\n  const response = await fetch(`${URL}register`, requestOptions);\n  return handleResponse(response);\n}\n\nconst userService = {\n  login,\n  register,\n};\n\nexport default userService;\n"]},"metadata":{},"sourceType":"module"}